generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model administradores {
  id         Int       @id @default(autoincrement())
  nome       String    @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  senha_hash String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

model atendentes {
  id         Int       @id @default(autoincrement())
  nome       String    @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  senha_hash String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

model agendamentos {
  id                  Int                   @id @default(autoincrement())
  cliente_id          Int
  pet_id              Int
  veterinario_id      Int
  data_hora           DateTime              @db.Timestamptz(6)
  tipo_consulta       String?               @db.VarChar(255)
  status              status_agendamento    @default(Agendado)
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  clientes            clientes              @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pets                pets                  @relation(fields: [pet_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  veterinarios        veterinarios          @relation(fields: [veterinario_id], references: [id], onUpdate: NoAction)
  historicos_clinicos historicos_clinicos[]

  @@unique([veterinario_id, data_hora])
  @@index([cliente_id], map: "idx_agendamentos_cliente_id")
  @@index([pet_id], map: "idx_agendamentos_pet_id")
  @@index([veterinario_id], map: "idx_agendamentos_veterinario_id")
}

model clientes {
  id              Int            @id @default(autoincrement())
  nome            String         @db.VarChar(255)
  celular         String         @db.VarChar(20)
  cpf             String?        @unique @db.VarChar(14)
  data_nascimento DateTime?      @db.Date
  email           String         @unique @db.VarChar(255)
  senha_hash      String         @db.VarChar(255)
  rua             String?        @db.VarChar(255)
  numero          String?        @db.VarChar(50)
  complemento     String?        @db.VarChar(100)
  cep             String?        @db.VarChar(10)
  bairro          String?        @db.VarChar(100)
  cidade          String?        @db.VarChar(100)
  estado          String?        @db.VarChar(50)
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?      @default(now()) @db.Timestamptz(6)
  agendamentos    agendamentos[]
  pets            pets[]
}

model historicos_clinicos {
  id               Int           @id @default(autoincrement())
  pet_id           Int
  agendamento_id   Int?
  vacinas          String?
  doencas_alergias String?
  medicamentos     String?
  observacoes      String?
  created_at       DateTime?     @default(now()) @db.Timestamptz(6)
  agendamentos     agendamentos? @relation(fields: [agendamento_id], references: [id], onUpdate: NoAction)
  pets             pets          @relation(fields: [pet_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([pet_id], map: "idx_historicos_clinicos_pet_id")
}

model pets {
  id                  Int                   @id @default(autoincrement())
  cliente_id          Int
  nome                String                @db.VarChar(255)
  especie             String                @db.VarChar(100)
  raca                String?               @db.VarChar(100)
  sexo                tipo_sexo?
  data_nascimento     DateTime?             @db.Date
  imagem              Bytes?
  imagem_tipo         String?               @db.VarChar(50)
  imagem_nome         String?               @db.VarChar(255)
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  agendamentos        agendamentos[]
  historicos_clinicos historicos_clinicos[]
  clientes            clientes              @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([cliente_id], map: "idx_pets_cliente_id")
}

model produtos_estoque {
  id           Int       @id @default(autoincrement())
  nome_produto String    @unique @db.VarChar(255)
  valor        Decimal   @db.Decimal(10, 2)
  quantidade   Int       @default(0)
  validade     DateTime? @db.Date
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
}

model veterinarios {
  id                Int            @id @default(autoincrement())
  nome              String         @db.VarChar(255)
  cpf               String         @unique @db.VarChar(14)
  crmv              String         @unique @db.VarChar(20)
  especialidades    String[]
  horarios_trabalho Json?
  created_at        DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?      @default(now()) @db.Timestamptz(6)
  agendamentos      agendamentos[]
}

enum status_agendamento {
  Agendado
  Conclu_do @map("Concluído")
  Cancelado
}

enum tipo_sexo {
  Macho
  F_mea @map("Fêmea")
}
